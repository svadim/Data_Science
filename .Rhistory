message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, )
x$setmean(m)
m
}
makeVector(1:8)
c1 <- makeVector(1:8)
c1$set()
c1$set(8)
c1$get()
c1$getmean()
c1$getmean(4)
c1$getmean()
c1 <- makeVector()
c1$get
c1$get()
c1$set(1:5)
c1$get()
c1$setmean(8)
cachemean(c1)
c1$getmean()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, )
x$setmean(m)
m
}
c1 <- makeVector(1:5)
cachemean(c1)
c1$getmean()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
c1 <- makeVector(1:5)
c1$getmean()
cachemean(c1)
c1$getmean()
c1
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
c1 <- makeVector()
c1
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, )
x$setmean(m)
m
}
c1 <- makeVector(1:5)
c2 <- makeVector(50:10)
cachemean(c1)
cachemean(c1)
cachemean(c1)
cachemean(c2)
cachemean(c2)
cachemean(c1)
cachemean(c2)
cachemean(c1)
cachemean(c2)
makeVector <- function(x = numeric()) {
m <- NULL
#       set <- function(y) {
#             x <<- y
#             m <<- NULL
#       }
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, )
x$setmean(m)
m
}
c1 <- makeVector(1:5)
c2 <- makeVector(50:10)
c1 <- makeVector(1:5)
c2 <- makeVector(50:10)
makeVector <- function(x = numeric()) {
m <- NULL
#       set <- function(y) {
#             x <<- y
#             m <<- NULL
#       }
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = "set", get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, )
x$setmean(m)
m
}
c1 <- makeVector(1:5)
c2 <- makeVector(50:10)
cachemean(c1)
cachemean(c2)
cachemean(c1)
cachemean(c2)
?solve
a <- matrix(1:4, 2, 2)
solve(a)
a
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, )
x$setinverse(inv)
inv
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, )
x$setinverse(inv)
inv
}
m <- matrix(1:4, 2, 2)
c1 <- makeCacheMatrix(m)
cacheSolve(c1)
cacheSolve(c1)
cacheSolve(c1)
# This functions allows you computes the inverse of matrix
# and to cache the result.
## This function creates a list containing the four functions:
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the value of the inverse
## 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# This function computes the inverse of matrix and sets
# result in the cache.
# If the inverse has already been calculated,
# then the function retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, )
x$setinverse(inv)
inv
}
a <- matrix(rnorm(100), 10, 10)
View(a)
c1 <- makeCacheMatrix(a)
cacheSolve(c1)
cacheSolve(c1)
cacheSolve(c1)
cacheSolve(c1)
cacheSolve(c1)
cacheSolve(c1)
a <- matrix(rnorm(10000), 100, 100)
c1 <- makeCacheMatrix(a)
c2 <- cacheSolve(c1)
c2 <- cacheSolve(c1)
# This functions allows you computes the inverse of matrix
# and to cache the result.
## This function creates a list containing the four functions:
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the value of the inverse
## 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# This function computes the inverse of matrix and sets
# result in the cache.
# If the inverse has already been calculated,
# then the function retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, )
x$setinverse(inv)
inv
}
debug()
debug(makeCacheMatrix)
makeCacheMatrix(1:5)
n
n
n
n
n
n
n
debug(makeCacheMatrix)
makeCacheMatrix(1:5)
n
n
n
n
n
n
n
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, )
x$setmean(m)
m
}
c1 <- cachemean(1:5)
c1 <- makeVector(1:5)
fix(`c1`)
c1
power <- function(exp) {
function(x) ^ exp
}
power <- function(exp) {
function(x) x ^ exp
}
c1 <- power(2)
c1
c1()
str(c1)
pollutantmean <- function(path, pollutant, id){
flist <- list.files(path, full.names=TRUE)[id]
data <- data.frame()
lapply(flist, function(x)
data <<- rbind(data, read.csv(x)))
#      data <- do.call(rbind, lapply(flist, read.csv))
mean(data[, pollutant], na.rm = TRUE)
}
path <- "R Programming/week 2/specdata"
polluant <- "nitrate"
id <- 1:3
polluant(path, polluant, id)
pollutantmean(path, pollutant, id)
traceback
pollutantmean <- function(path, pollutant, id){
flist <- list.files(path, full.names=TRUE)[id]
data <- data.frame()
lapply(flist, function(x)
data <<- rbind(data, read.csv(x)))
#      data <- do.call(rbind, lapply(flist, read.csv))
#      mean(data[, pollutant], na.rm = TRUE)
data
}
path <- "R Programming/week 2/specdata"
pollutant <- "nitrate"
id <- 1:3
pollutantmean(path, pollutant, id)
m <- pollutantmean(path, pollutant, id)
View(m)
View(m)
pollutantmean <- function(path, pollutant, id){
flist <- list.files(path, full.names=TRUE)[id]
data <- data.frame()
lapply(flist, function(x)
data <<- rbind(data, read.csv(x)))
#      data <- do.call(rbind, lapply(flist, read.csv))
#      mean(data[, pollutant], na.rm = TRUE)
data[, pollutant]
}
m <- pollutantmean(path, pollutant, id)
fix(m)
pollutantmean <- function(path, pollutant, id){
flist <- list.files(path, full.names=TRUE)[id]
data <- data.frame()
lapply(flist, function(x)
data <<- rbind(data, read.csv(x)))
#      data <- do.call(rbind, lapply(flist, read.csv))
mean(data[, pollutant], na.rm = TRUE)
}
m <- pollutantmean(path, pollutant, id)
path <- "R Programming/week 2/specdata"
pollutant <- "nitrate"
id <- 1:3
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names = TRUE)[id]
data <- data.frame()
for(i in seq_along(id)) {
data <- rbind(data, read.csv(files_list[i]))
}
mean(data[, pollutant], na.rm = TRUE)
}
m <- pollutantmean(path, pollutant, id)
pollutantmean <- function(path, pollutant, id){
flist <- list.files(path, full.names=TRUE)[id]
data <- do.call(rbind, lapply(flist, read.csv))
mean(data[, pollutant], na.rm = TRUE)
}
m <- pollutantmean(path, pollutant, id)
pollutantmean <- function(path, pollutant, id){
flist <- list.files(path, full.names=TRUE)[id]
data <- data.frame()
lapply(flist, function(x)
data <<- rbind(data, read.csv(x)))
mean(data[, pollutant], na.rm = TRUE)
}
m <- pollutantmean(path, pollutant, id)
id <- 1:332
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names = TRUE)[id]
data <- data.frame()
for(i in seq_along(id)) {
data <- rbind(data, read.csv(files_list[i]))
}
mean(data[, pollutant], na.rm = TRUE)
}
m <- pollutantmean(path, pollutant, id)
pollutantmean <- function(path, pollutant, id){
flist <- list.files(path, full.names=TRUE)[id]
data <- do.call(rbind, lapply(flist, read.csv))
mean(data[, pollutant], na.rm = TRUE)
}
m <- pollutantmean(path, pollutant, id)
pollutantmean <- function(path, pollutant, id){
flist <- list.files(path, full.names=TRUE)[id]
data <- data.frame()
lapply(flist, function(x)
data <<- rbind(data, read.csv(x)))
mean(data[, pollutant], na.rm = TRUE)
}
m <- pollutantmean(path, pollutant, id)
pollutantmean <- function(path, pollutant, id){
flist <- list.files(path, full.names=TRUE)[id]
data <- data.frame()
lapply(flist, function(x)
data <<- rbind(data, read.csv(x)))
mean(data[, pollutant], na.rm = TRUE)
}
m <- pollutantmean(path, pollutant, id)
path <- "R Programming/week 2/specdata"
pollutant <- "nitrate"
id <- 1:332
pollutantmean <- function(path, pollutant, id){
flist <- list.files(path, full.names=TRUE)[id]
data <- do.call(rbind, lapply(flist, read.csv))
mean(data[, pollutant], na.rm = TRUE)
}
m <- pollutantmean(path, pollutant, id)
